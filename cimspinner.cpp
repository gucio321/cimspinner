//This file is automatically generated by generator.lua from https://github.com/cimgui/imnodes
//based on imnodes.h file version XXX from https://github.com/Nelarius/imnodes
#include "imgui.h"
#include "imgui_internal.h"
#include "./imspinner/imspinner.h"
#include "cimspinner.h"
#include <cstring>


CIMGUI_API SpinnerType* SpinnerType_SpinnerType(const SpinnerTypeT v)
{
    return IM_NEW(SpinnerType)(v);
}
CIMGUI_API void SpinnerType_destroy(SpinnerType* self)
{
    IM_DELETE(self);
}
CIMGUI_API Radius* Radius_Radius(const float v)
{
    return IM_NEW(Radius)(v);
}
CIMGUI_API void Radius_destroy(Radius* self)
{
    IM_DELETE(self);
}
CIMGUI_API Speed* Speed_Speed(const float v)
{
    return IM_NEW(Speed)(v);
}
CIMGUI_API void Speed_destroy(Speed* self)
{
    IM_DELETE(self);
}
CIMGUI_API Thickness* Thickness_Thickness(const float v)
{
    return IM_NEW(Thickness)(v);
}
CIMGUI_API void Thickness_destroy(Thickness* self)
{
    IM_DELETE(self);
}
CIMGUI_API Color* Color_Color(const ImColor v)
{
    return IM_NEW(Color)(v);
}
CIMGUI_API void Color_destroy(Color* self)
{
    IM_DELETE(self);
}
CIMGUI_API BgColor* BgColor_BgColor(const ImColor v)
{
    return IM_NEW(BgColor)(v);
}
CIMGUI_API void BgColor_destroy(BgColor* self)
{
    IM_DELETE(self);
}
CIMGUI_API AltColor* AltColor_AltColor(const ImColor v)
{
    return IM_NEW(AltColor)(v);
}
CIMGUI_API void AltColor_destroy(AltColor* self)
{
    IM_DELETE(self);
}
CIMGUI_API Angle* Angle_Angle(const float v)
{
    return IM_NEW(Angle)(v);
}
CIMGUI_API void Angle_destroy(Angle* self)
{
    IM_DELETE(self);
}
CIMGUI_API AngleMin* AngleMin_AngleMin(const float v)
{
    return IM_NEW(AngleMin)(v);
}
CIMGUI_API void AngleMin_destroy(AngleMin* self)
{
    IM_DELETE(self);
}
CIMGUI_API AngleMax* AngleMax_AngleMax(const float v)
{
    return IM_NEW(AngleMax)(v);
}
CIMGUI_API void AngleMax_destroy(AngleMax* self)
{
    IM_DELETE(self);
}
CIMGUI_API FloatPtr* FloatPtr_FloatPtr(const float_ptr v)
{
    return IM_NEW(FloatPtr)(v);
}
CIMGUI_API void FloatPtr_destroy(FloatPtr* self)
{
    IM_DELETE(self);
}
CIMGUI_API Dots* Dots_Dots(const int v)
{
    return IM_NEW(Dots)(v);
}
CIMGUI_API void Dots_destroy(Dots* self)
{
    IM_DELETE(self);
}
CIMGUI_API MiddleDots* MiddleDots_MiddleDots(const int v)
{
    return IM_NEW(MiddleDots)(v);
}
CIMGUI_API void MiddleDots_destroy(MiddleDots* self)
{
    IM_DELETE(self);
}
CIMGUI_API MinThickness* MinThickness_MinThickness(const float v)
{
    return IM_NEW(MinThickness)(v);
}
CIMGUI_API void MinThickness_destroy(MinThickness* self)
{
    IM_DELETE(self);
}
CIMGUI_API Reverse* Reverse_Reverse(const bool v)
{
    return IM_NEW(Reverse)(v);
}
CIMGUI_API void Reverse_destroy(Reverse* self)
{
    IM_DELETE(self);
}
CIMGUI_API Delta* Delta_Delta(const float v)
{
    return IM_NEW(Delta)(v);
}
CIMGUI_API void Delta_destroy(Delta* self)
{
    IM_DELETE(self);
}
CIMGUI_API Mode* Mode_Mode(const int v)
{
    return IM_NEW(Mode)(v);
}
CIMGUI_API void Mode_destroy(Mode* self)
{
    IM_DELETE(self);
}
CIMGUI_API bool ImSpinner::detail_SpinnerBegin(const char* label,float radius,ImVec2 *pos noname1,ImVec2 *size noname2,ImVec2 *centre noname3,int *num_segments noname4)
{
    return ImSpinner::detail::SpinnerBegin(label,radius,*noname1,*noname2,*noname3,*noname4);
}
CIMGUI_API SpinnerConfig* SpinnerConfig_SpinnerConfig(void)
{
    return IM_NEW(SpinnerConfig)();
}
CIMGUI_API void SpinnerConfig_destroy(SpinnerConfig* self)
{
    IM_DELETE(self);
}
CIMGUI_API void SpinnerConfig_setSpinnerType(SpinnerConfig* self,const SpinnerTypeT v)
{
    return self->setSpinnerType(v);
}
CIMGUI_API void SpinnerConfig_set_SpinnerType(SpinnerConfig* self,SpinnerType h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setRadius(SpinnerConfig* self,const float v)
{
    return self->setRadius(v);
}
CIMGUI_API void SpinnerConfig_set_Radius(SpinnerConfig* self,Radius h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setSpeed(SpinnerConfig* self,const float v)
{
    return self->setSpeed(v);
}
CIMGUI_API void SpinnerConfig_set_Speed(SpinnerConfig* self,Speed h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setThickness(SpinnerConfig* self,const float v)
{
    return self->setThickness(v);
}
CIMGUI_API void SpinnerConfig_set_Thickness(SpinnerConfig* self,Thickness h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setColor(SpinnerConfig* self,const ImColor v)
{
    return self->setColor(v);
}
CIMGUI_API void SpinnerConfig_set_Color(SpinnerConfig* self,Color h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setBgColor(SpinnerConfig* self,const ImColor v)
{
    return self->setBgColor(v);
}
CIMGUI_API void SpinnerConfig_set_BgColor(SpinnerConfig* self,BgColor h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setAltColor(SpinnerConfig* self,const ImColor v)
{
    return self->setAltColor(v);
}
CIMGUI_API void SpinnerConfig_set_AltColor(SpinnerConfig* self,AltColor h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setAngle(SpinnerConfig* self,const float v)
{
    return self->setAngle(v);
}
CIMGUI_API void SpinnerConfig_set_Angle(SpinnerConfig* self,Angle h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setAngleMin(SpinnerConfig* self,const float v)
{
    return self->setAngleMin(v);
}
CIMGUI_API void SpinnerConfig_set_AngleMin(SpinnerConfig* self,AngleMin h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setAngleMax(SpinnerConfig* self,const float v)
{
    return self->setAngleMax(v);
}
CIMGUI_API void SpinnerConfig_set_AngleMax(SpinnerConfig* self,AngleMax h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setFloatPtr(SpinnerConfig* self,const float_ptr v)
{
    return self->setFloatPtr(v);
}
CIMGUI_API void SpinnerConfig_set_FloatPtr(SpinnerConfig* self,FloatPtr h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setDots(SpinnerConfig* self,const int v)
{
    return self->setDots(v);
}
CIMGUI_API void SpinnerConfig_set_Dots(SpinnerConfig* self,Dots h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setMiddleDots(SpinnerConfig* self,const int v)
{
    return self->setMiddleDots(v);
}
CIMGUI_API void SpinnerConfig_set_MiddleDots(SpinnerConfig* self,MiddleDots h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setMinThickness(SpinnerConfig* self,const float v)
{
    return self->setMinThickness(v);
}
CIMGUI_API void SpinnerConfig_set_MinThickness(SpinnerConfig* self,MinThickness h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setReverse(SpinnerConfig* self,const bool v)
{
    return self->setReverse(v);
}
CIMGUI_API void SpinnerConfig_set_Reverse(SpinnerConfig* self,Reverse h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setDelta(SpinnerConfig* self,const float v)
{
    return self->setDelta(v);
}
CIMGUI_API void SpinnerConfig_set_Delta(SpinnerConfig* self,Delta h)
{
    return self->set(h);
}
CIMGUI_API void SpinnerConfig_setMode(SpinnerConfig* self,const int v)
{
    return self->setMode(v);
}
CIMGUI_API void SpinnerConfig_set_Mode(SpinnerConfig* self,Mode h)
{
    return self->set(h);
}
CIMGUI_API void ImSpinner_color_alpha(ImColor *pOut,ImColor c,float alpha)
{
    *pOut = ImSpinner::color_alpha(c,alpha);
}
CIMGUI_API float ImSpinner_damped_spring(float mass,float stiffness,float damping,float time,float a,float b)
{
    return ImSpinner::damped_spring(mass,stiffness,damping,time,a,b);
}
CIMGUI_API float ImSpinner_damped_gravity(float limtime)
{
    return ImSpinner::damped_gravity(limtime);
}
CIMGUI_API float ImSpinner_damped_trifolium(float limtime,float a,float b)
{
    return ImSpinner::damped_trifolium(limtime,a,b);
}
CIMGUI_API float ImSpinner_damped_inoutelastic(float t,float amplitude,float period)
{
    return ImSpinner::damped_inoutelastic(t,amplitude,period);
}
CIMGUI_API float> ImSpinner_damped_infinity(float t,float a)
{
    return ImSpinner::damped_infinity(t,a);
}
CIMGUI_API float ImSpinner_ease_inquad(float time)
{
    return ImSpinner::ease_inquad(time);
}
CIMGUI_API float ImSpinner_ease_outquad(float time)
{
    return ImSpinner::ease_outquad(time);
}
CIMGUI_API float ImSpinner_ease_inoutquad_Float(float t)
{
    return ImSpinner::ease_inoutquad(t);
}
CIMGUI_API float ImSpinner_ease_inoutquad_FloatPtr(float* p)
{
    return ImSpinner::ease_inoutquad(p);
}
CIMGUI_API float ImSpinner_ease_outcubic(float t)
{
    return ImSpinner::ease_outcubic(t);
}
CIMGUI_API float ImSpinner_ease_inexpo(float t)
{
    return ImSpinner::ease_inexpo(t);
}
CIMGUI_API float ImSpinner_ease_inoutexpo_Float(float t)
{
    return ImSpinner::ease_inoutexpo(t);
}
CIMGUI_API float ImSpinner_ease_inoutexpo_FloatPtr(float* p)
{
    return ImSpinner::ease_inoutexpo(p);
}
CIMGUI_API float ImSpinner_ease_spring(float* p)
{
    return ImSpinner::ease_spring(p);
}
CIMGUI_API float ImSpinner_ease_gravity(float* p)
{
    return ImSpinner::ease_gravity(p);
}
CIMGUI_API float ImSpinner_ease_infinity(float* p)
{
    return ImSpinner::ease_infinity(p);
}
CIMGUI_API float ImSpinner_ease_inoutelastic(float* p)
{
    return ImSpinner::ease_inoutelastic(p);
}
CIMGUI_API float ImSpinner_ease_sine(float* p)
{
    return ImSpinner::ease_sine(p);
}
CIMGUI_API void ImSpinner_SpinnerRainbow(const char* label,float radius,float thickness,const ImColor color,float speed,float ang_min,float ang_max,int arcs,int mode)
{
    return ImSpinner::SpinnerRainbow(label,radius,thickness,color,speed,ang_min,ang_max,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerRainbowMix(const char* label,float radius,float thickness,const ImColor color,float speed,float ang_min,float ang_max,int arcs,int mode)
{
    return ImSpinner::SpinnerRainbowMix(label,radius,thickness,color,speed,ang_min,ang_max,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerRotatingHeart(const char* label,float radius,float thickness,const ImColor color,float speed,float ang_min)
{
    return ImSpinner::SpinnerRotatingHeart(label,radius,thickness,color,speed,ang_min);
}
CIMGUI_API void ImSpinner_SpinnerAng(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,float angle,int mode)
{
    return ImSpinner::SpinnerAng(label,radius,thickness,color,bg,speed,angle,mode);
}
CIMGUI_API void ImSpinner_SpinnerAng8(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,float angle,int mode,float rkoef)
{
    return ImSpinner::SpinnerAng8(label,radius,thickness,color,bg,speed,angle,mode,rkoef);
}
CIMGUI_API void ImSpinner_SpinnerAngMix(const char* label,float radius,float thickness,const ImColor color,float speed,float angle,int arcs,int mode)
{
    return ImSpinner::SpinnerAngMix(label,radius,thickness,color,speed,angle,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerLoadingRing(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,int segments)
{
    return ImSpinner::SpinnerLoadingRing(label,radius,thickness,color,bg,speed,segments);
}
CIMGUI_API void ImSpinner_SpinnerClock(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed)
{
    return ImSpinner::SpinnerClock(label,radius,thickness,color,bg,speed);
}
CIMGUI_API void ImSpinner_SpinnerPulsar(const char* label,float radius,float thickness,const ImColor bg,float speed,bool sequence,float angle,int mode)
{
    return ImSpinner::SpinnerPulsar(label,radius,thickness,bg,speed,sequence,angle,mode);
}
CIMGUI_API void ImSpinner_SpinnerDoubleFadePulsar(const char* label,float radius,float noname1,const ImColor bg,float speed)
{
    return ImSpinner::SpinnerDoubleFadePulsar(label,radius,noname1,bg,speed);
}
CIMGUI_API void ImSpinner_SpinnerTwinPulsar(const char* label,float radius,float thickness,const ImColor color,float speed,int rings,int mode)
{
    return ImSpinner::SpinnerTwinPulsar(label,radius,thickness,color,speed,rings,mode);
}
CIMGUI_API void ImSpinner_SpinnerFadePulsar(const char* label,float radius,const ImColor color,float speed,int rings,int mode)
{
    return ImSpinner::SpinnerFadePulsar(label,radius,color,speed,rings,mode);
}
CIMGUI_API void ImSpinner_SpinnerFadePulsarSquare(const char* label,float radius,const ImColor color,float speed,int rings,int mode)
{
    return ImSpinner::SpinnerFadePulsarSquare(label,radius,color,speed,rings,mode);
}
CIMGUI_API void ImSpinner_SpinnerCircularLines(const char* label,float radius,const ImColor color,float speed,int lines,int mode)
{
    return ImSpinner::SpinnerCircularLines(label,radius,color,speed,lines,mode);
}
CIMGUI_API void ImSpinner_SpinnerDots(const char* label,float* nextdot,float radius,float thickness,const ImColor color,float speed,size_t dots,float minth,int mode)
{
    return ImSpinner::SpinnerDots(label,nextdot,radius,thickness,color,speed,dots,minth,mode);
}
CIMGUI_API void ImSpinner_SpinnerVDots(const char* label,float radius,float thickness,const ImColor color,const ImColor bgcolor,float speed,size_t dots,size_t mdots,int mode)
{
    return ImSpinner::SpinnerVDots(label,radius,thickness,color,bgcolor,speed,dots,mdots,mode);
}
CIMGUI_API void ImSpinner_SpinnerBounceDots(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots,int mode)
{
    return ImSpinner::SpinnerBounceDots(label,radius,thickness,color,speed,dots,mode);
}
CIMGUI_API void ImSpinner_SpinnerZipDots(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots)
{
    return ImSpinner::SpinnerZipDots(label,radius,thickness,color,speed,dots);
}
CIMGUI_API void ImSpinner_SpinnerDotsToPoints(const char* label,float radius,float thickness,float offset_k,const ImColor color,float speed,size_t dots)
{
    return ImSpinner::SpinnerDotsToPoints(label,radius,thickness,offset_k,color,speed,dots);
}
CIMGUI_API void ImSpinner_SpinnerDotsToBar(const char* label,float radius,float thickness,float offset_k,const ImColor color,float speed,size_t dots)
{
    return ImSpinner::SpinnerDotsToBar(label,radius,thickness,offset_k,color,speed,dots);
}
CIMGUI_API void ImSpinner_SpinnerWaveDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt)
{
    return ImSpinner::SpinnerWaveDots(label,radius,thickness,color,speed,lt);
}
CIMGUI_API void ImSpinner_SpinnerFadeDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt,int mode)
{
    return ImSpinner::SpinnerFadeDots(label,radius,thickness,color,speed,lt,mode);
}
CIMGUI_API void ImSpinner_SpinnerThreeDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt)
{
    return ImSpinner::SpinnerThreeDots(label,radius,thickness,color,speed,lt);
}
CIMGUI_API void ImSpinner_SpinnerFiveDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt)
{
    return ImSpinner::SpinnerFiveDots(label,radius,thickness,color,speed,lt);
}
CIMGUI_API void ImSpinner_Spinner4Caleidospcope(const char* label,float radius,float thickness,const ImColor color,float speed,int lt)
{
    return ImSpinner::Spinner4Caleidospcope(label,radius,thickness,color,speed,lt);
}
CIMGUI_API void ImSpinner_SpinnerMultiFadeDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt)
{
    return ImSpinner::SpinnerMultiFadeDots(label,radius,thickness,color,speed,lt);
}
CIMGUI_API void ImSpinner_SpinnerThickToSin(const char* label,float radius,float thickness,const ImColor color,float speed,int lt,int mode)
{
    return ImSpinner::SpinnerThickToSin(label,radius,thickness,color,speed,lt,mode);
}
CIMGUI_API void ImSpinner_SpinnerScaleDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt)
{
    return ImSpinner::SpinnerScaleDots(label,radius,thickness,color,speed,lt);
}
CIMGUI_API void ImSpinner_SpinnerSquareSpins(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSquareSpins(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerMovingDots(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots)
{
    return ImSpinner::SpinnerMovingDots(label,radius,thickness,color,speed,dots);
}
CIMGUI_API void ImSpinner_SpinnerRotateDots(const char* label,float radius,float thickness,const ImColor color,float speed,int dots,int mode)
{
    return ImSpinner::SpinnerRotateDots(label,radius,thickness,color,speed,dots,mode);
}
CIMGUI_API void ImSpinner_SpinnerOrionDots(const char* label,float radius,float thickness,const ImColor color,float speed,int arcs)
{
    return ImSpinner::SpinnerOrionDots(label,radius,thickness,color,speed,arcs);
}
CIMGUI_API void ImSpinner_SpinnerGalaxyDots(const char* label,float radius,float thickness,const ImColor color,float speed,int arcs)
{
    return ImSpinner::SpinnerGalaxyDots(label,radius,thickness,color,speed,arcs);
}
CIMGUI_API void ImSpinner_SpinnerTwinAng(const char* label,float radius1,float radius2,float thickness,const ImColor color1,const ImColor color2,float speed,float angle,int mode)
{
    return ImSpinner::SpinnerTwinAng(label,radius1,radius2,thickness,color1,color2,speed,angle,mode);
}
CIMGUI_API void ImSpinner_SpinnerFilling(const char* label,float radius,float thickness,const ImColor color1,const ImColor color2,float speed)
{
    return ImSpinner::SpinnerFilling(label,radius,thickness,color1,color2,speed);
}
CIMGUI_API void ImSpinner_SpinnerFillingMem(const char* label,float radius,float thickness,const ImColor color,ImColor *colorbg noname1,float speed)
{
    return ImSpinner::SpinnerFillingMem(label,radius,thickness,color,*noname1,speed);
}
CIMGUI_API void ImSpinner_SpinnerTopup(const char* label,float radius1,float radius2,const ImColor color,const ImColor fg,const ImColor bg,float speed)
{
    return ImSpinner::SpinnerTopup(label,radius1,radius2,color,fg,bg,speed);
}
CIMGUI_API void ImSpinner_SpinnerTwinAng180(const char* label,float radius1,float radius2,float thickness,const ImColor color1,const ImColor color2,float speed,float angle,int mode)
{
    return ImSpinner::SpinnerTwinAng180(label,radius1,radius2,thickness,color1,color2,speed,angle,mode);
}
CIMGUI_API void ImSpinner_SpinnerTwinAng360(const char* label,float radius1,float radius2,float thickness,const ImColor color1,const ImColor color2,float speed1,float speed2,int mode)
{
    return ImSpinner::SpinnerTwinAng360(label,radius1,radius2,thickness,color1,color2,speed1,speed2,mode);
}
CIMGUI_API void ImSpinner_SpinnerIncDots(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots)
{
    return ImSpinner::SpinnerIncDots(label,radius,thickness,color,speed,dots);
}
CIMGUI_API void ImSpinner_SpinnerIncFullDots(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots)
{
    return ImSpinner::SpinnerIncFullDots(label,radius,thickness,color,speed,dots);
}
CIMGUI_API void ImSpinner_SpinnerFadeBars(const char* label,float w,const ImColor color,float speed,size_t bars,bool scale)
{
    return ImSpinner::SpinnerFadeBars(label,w,color,speed,bars,scale);
}
CIMGUI_API void ImSpinner_SpinnerFadeTris(const char* label,float radius,const ImColor color,float speed,size_t dim,bool scale,int mode)
{
    return ImSpinner::SpinnerFadeTris(label,radius,color,speed,dim,scale,mode);
}
CIMGUI_API void ImSpinner_SpinnerBarsRotateFade(const char* label,float rmin,float rmax,float thickness,const ImColor color,float speed,size_t bars)
{
    return ImSpinner::SpinnerBarsRotateFade(label,rmin,rmax,thickness,color,speed,bars);
}
CIMGUI_API void ImSpinner_SpinnerBarsScaleMiddle(const char* label,float w,const ImColor color,float speed,size_t bars)
{
    return ImSpinner::SpinnerBarsScaleMiddle(label,w,color,speed,bars);
}
CIMGUI_API void ImSpinner_SpinnerAngTwin(const char* label,float radius1,float radius2,float thickness,const ImColor color,const ImColor bg,float speed,float angle,size_t arcs,int mode)
{
    return ImSpinner::SpinnerAngTwin(label,radius1,radius2,thickness,color,bg,speed,angle,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerArcRotation(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs,int mode)
{
    return ImSpinner::SpinnerArcRotation(label,radius,thickness,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerArcFade(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs,int mode)
{
    return ImSpinner::SpinnerArcFade(label,radius,thickness,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerSimpleArcFade(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSimpleArcFade(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerSquareStrokeFade(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSquareStrokeFade(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerAsciiSymbolPoints(const char* label,const char* text,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerAsciiSymbolPoints(label,text,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerTextFading(const char* label,const char* text,float radius,float fsize,const ImColor color,float speed)
{
    return ImSpinner::SpinnerTextFading(label,text,radius,fsize,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerSevenSegments(const char* label,const char* text,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSevenSegments(label,text,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerSquareStrokeFill(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSquareStrokeFill(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerSquareStrokeLoading(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSquareStrokeLoading(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerSquareLoading(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSquareLoading(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerFilledArcFade(const char* label,float radius,const ImColor color,float speed,size_t arcs,int mode)
{
    return ImSpinner::SpinnerFilledArcFade(label,radius,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerPointsRoller(const char* label,float radius,float thickness,const ImColor color,float speed,size_t points,int circles,float rspeed)
{
    return ImSpinner::SpinnerPointsRoller(label,radius,thickness,color,speed,points,circles,rspeed);
}
CIMGUI_API void ImSpinner_SpinnerPointsArcBounce(const char* label,float radius,float thickness,const ImColor color,float speed,size_t points,int circles,float rspeed)
{
    return ImSpinner::SpinnerPointsArcBounce(label,radius,thickness,color,speed,points,circles,rspeed);
}
CIMGUI_API void ImSpinner_SpinnerFilledArcColor(const char* label,float radius,const ImColor color,const ImColor bg,float speed,size_t arcs)
{
    return ImSpinner::SpinnerFilledArcColor(label,radius,color,bg,speed,arcs);
}
CIMGUI_API void ImSpinner_SpinnerFilledArcRing(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,size_t arcs)
{
    return ImSpinner::SpinnerFilledArcRing(label,radius,thickness,color,bg,speed,arcs);
}
CIMGUI_API void ImSpinner_SpinnerArcWedges(const char* label,float radius,const ImColor color,float speed,size_t arcs,int mode)
{
    return ImSpinner::SpinnerArcWedges(label,radius,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerTwinBall(const char* label,float radius1,float radius2,float thickness,float b_thickness,const ImColor ball,const ImColor bg,float speed,size_t balls,int mode)
{
    return ImSpinner::SpinnerTwinBall(label,radius1,radius2,thickness,b_thickness,ball,bg,speed,balls,mode);
}
CIMGUI_API void ImSpinner_SpinnerSolarBalls(const char* label,float radius,float thickness,const ImColor ball,const ImColor bg,float speed,size_t balls)
{
    return ImSpinner::SpinnerSolarBalls(label,radius,thickness,ball,bg,speed,balls);
}
CIMGUI_API void ImSpinner_SpinnerSolarScaleBalls(const char* label,float radius,float thickness,const ImColor ball,float speed,size_t balls)
{
    return ImSpinner::SpinnerSolarScaleBalls(label,radius,thickness,ball,speed,balls);
}
CIMGUI_API void ImSpinner_SpinnerSolarArcs(const char* label,float radius,float thickness,const ImColor ball,const ImColor bg,float speed,size_t balls)
{
    return ImSpinner::SpinnerSolarArcs(label,radius,thickness,ball,bg,speed,balls);
}
CIMGUI_API void ImSpinner_SpinnerMovingArcs(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs)
{
    return ImSpinner::SpinnerMovingArcs(label,radius,thickness,color,speed,arcs);
}
CIMGUI_API void ImSpinner_SpinnerRainbowCircle(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs,float mode)
{
    return ImSpinner::SpinnerRainbowCircle(label,radius,thickness,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerBounceBall(const char* label,float radius,float thickness,const ImColor color,float speed,int dots,bool shadow)
{
    return ImSpinner::SpinnerBounceBall(label,radius,thickness,color,speed,dots,shadow);
}
CIMGUI_API void ImSpinner_SpinnerPulsarBall(const char* label,float radius,float thickness,const ImColor color,float speed,bool shadow,int mode)
{
    return ImSpinner::SpinnerPulsarBall(label,radius,thickness,color,speed,shadow,mode);
}
CIMGUI_API void ImSpinner_SpinnerIncScaleDots(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots,float angle,int mode)
{
    return ImSpinner::SpinnerIncScaleDots(label,radius,thickness,color,speed,dots,angle,mode);
}
CIMGUI_API void ImSpinner_SpinnerSomeScaleDots(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots,int mode)
{
    return ImSpinner::SpinnerSomeScaleDots(label,radius,thickness,color,speed,dots,mode);
}
CIMGUI_API void ImSpinner_SpinnerAngTriple(const char* label,float radius1,float radius2,float radius3,float thickness,const ImColor c1,const ImColor c2,const ImColor c3,float speed,float angle)
{
    return ImSpinner::SpinnerAngTriple(label,radius1,radius2,radius3,thickness,c1,c2,c3,speed,angle);
}
CIMGUI_API void ImSpinner_SpinnerAngEclipse(const char* label,float radius,float thickness,const ImColor color,float speed,float angle)
{
    return ImSpinner::SpinnerAngEclipse(label,radius,thickness,color,speed,angle);
}
CIMGUI_API void ImSpinner_SpinnerIngYang(const char* label,float radius,float thickness,bool reverse,float yang_detlta_r,const ImColor colorI,const ImColor colorY,float speed,float angle,int mode)
{
    return ImSpinner::SpinnerIngYang(label,radius,thickness,reverse,yang_detlta_r,colorI,colorY,speed,angle,mode);
}
CIMGUI_API void ImSpinner_SpinnerGooeyBalls(const char* label,float radius,const ImColor color,float speed,int mode)
{
    return ImSpinner::SpinnerGooeyBalls(label,radius,color,speed,mode);
}
CIMGUI_API void ImSpinner_SpinnerDotsLoading(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed)
{
    return ImSpinner::SpinnerDotsLoading(label,radius,thickness,color,bg,speed);
}
CIMGUI_API void ImSpinner_SpinnerRotateGooeyBalls(const char* label,float radius,float thickness,const ImColor color,float speed,int balls,int mode)
{
    return ImSpinner::SpinnerRotateGooeyBalls(label,radius,thickness,color,speed,balls,mode);
}
CIMGUI_API void ImSpinner_SpinnerHerbertBalls(const char* label,float radius,float thickness,const ImColor color,float speed,int balls)
{
    return ImSpinner::SpinnerHerbertBalls(label,radius,thickness,color,speed,balls);
}
CIMGUI_API void ImSpinner_SpinnerHerbertBalls3D(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerHerbertBalls3D(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerRotateTriangles(const char* label,float radius,float thickness,const ImColor color,float speed,int tris,int mode)
{
    return ImSpinner::SpinnerRotateTriangles(label,radius,thickness,color,speed,tris,mode);
}
CIMGUI_API void ImSpinner_SpinnerRotateShapes(const char* label,float radius,float thickness,const ImColor color,float speed,int shapes,int pnt)
{
    return ImSpinner::SpinnerRotateShapes(label,radius,thickness,color,speed,shapes,pnt);
}
CIMGUI_API void ImSpinner_SpinnerSinSquares(const char* label,float radius,float thickness,const ImColor color,float speed,int mode)
{
    return ImSpinner::SpinnerSinSquares(label,radius,thickness,color,speed,mode);
}
CIMGUI_API void ImSpinner_SpinnerMoonLine(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,float angle)
{
    return ImSpinner::SpinnerMoonLine(label,radius,thickness,color,bg,speed,angle);
}
CIMGUI_API void ImSpinner_SpinnerCircleDrop(const char* label,float radius,float thickness,float thickness_drop,const ImColor color,const ImColor bg,float speed,float angle)
{
    return ImSpinner::SpinnerCircleDrop(label,radius,thickness,thickness_drop,color,bg,speed,angle);
}
CIMGUI_API void ImSpinner_SpinnerSurroundedIndicator(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed)
{
    return ImSpinner::SpinnerSurroundedIndicator(label,radius,thickness,color,bg,speed);
}
CIMGUI_API void ImSpinner_SpinnerWifiIndicator(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,float cangle,int dots)
{
    return ImSpinner::SpinnerWifiIndicator(label,radius,thickness,color,bg,speed,cangle,dots);
}
CIMGUI_API void ImSpinner_SpinnerTrianglesSelector(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,size_t bars)
{
    return ImSpinner::SpinnerTrianglesSelector(label,radius,thickness,color,bg,speed,bars);
}
CIMGUI_API void ImSpinner_SpinnerCamera(const char* label,float radius,float thickness,LeafColor* leaf_color,float speed,size_t bars,int mode)
{
    return ImSpinner::SpinnerCamera(label,radius,thickness,leaf_color,speed,bars,mode);
}
CIMGUI_API void ImSpinner_SpinnerFlowingGradient(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,float angle)
{
    return ImSpinner::SpinnerFlowingGradient(label,radius,thickness,color,bg,speed,angle);
}
CIMGUI_API void ImSpinner_SpinnerRotateSegments(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs,size_t layers,int mode)
{
    return ImSpinner::SpinnerRotateSegments(label,radius,thickness,color,speed,arcs,layers,mode);
}
CIMGUI_API void ImSpinner_SpinnerLemniscate(const char* label,float radius,float thickness,const ImColor color,float speed,float angle)
{
    return ImSpinner::SpinnerLemniscate(label,radius,thickness,color,speed,angle);
}
CIMGUI_API void ImSpinner_SpinnerRotateGear(const char* label,float radius,float thickness,const ImColor color,float speed,size_t pins)
{
    return ImSpinner::SpinnerRotateGear(label,radius,thickness,color,speed,pins);
}
CIMGUI_API void ImSpinner_SpinnerRotateWheel(const char* label,float radius,float thickness,const ImColor bg_color,const ImColor color,float speed,size_t pins)
{
    return ImSpinner::SpinnerRotateWheel(label,radius,thickness,bg_color,color,speed,pins);
}
CIMGUI_API void ImSpinner_SpinnerAtom(const char* label,float radius,float thickness,const ImColor color,float speed,int elipses)
{
    return ImSpinner::SpinnerAtom(label,radius,thickness,color,speed,elipses);
}
CIMGUI_API void ImSpinner_SpinnerPatternRings(const char* label,float radius,float thickness,const ImColor color,float speed,int elipses)
{
    return ImSpinner::SpinnerPatternRings(label,radius,thickness,color,speed,elipses);
}
CIMGUI_API void ImSpinner_SpinnerPatternEclipse(const char* label,float radius,float thickness,const ImColor color,float speed,int elipses,float delta_a,float delta_y)
{
    return ImSpinner::SpinnerPatternEclipse(label,radius,thickness,color,speed,elipses,delta_a,delta_y);
}
CIMGUI_API void ImSpinner_SpinnerPatternSphere(const char* label,float radius,float thickness,const ImColor color,float speed,int elipses)
{
    return ImSpinner::SpinnerPatternSphere(label,radius,thickness,color,speed,elipses);
}
CIMGUI_API void ImSpinner_SpinnerRingSynchronous(const char* label,float radius,float thickness,const ImColor color,float speed,int elipses)
{
    return ImSpinner::SpinnerRingSynchronous(label,radius,thickness,color,speed,elipses);
}
CIMGUI_API void ImSpinner_SpinnerRingWatermarks(const char* label,float radius,float thickness,const ImColor color,float speed,int elipses)
{
    return ImSpinner::SpinnerRingWatermarks(label,radius,thickness,color,speed,elipses);
}
CIMGUI_API void ImSpinner_SpinnerRotatedAtom(const char* label,float radius,float thickness,const ImColor color,float speed,int elipses,int mode)
{
    return ImSpinner::SpinnerRotatedAtom(label,radius,thickness,color,speed,elipses,mode);
}
CIMGUI_API void ImSpinner_SpinnerRainbowBalls(const char* label,float radius,float thickness,const ImColor color,float speed,int balls,int mode)
{
    return ImSpinner::SpinnerRainbowBalls(label,radius,thickness,color,speed,balls,mode);
}
CIMGUI_API void ImSpinner_SpinnerRainbowShot(const char* label,float radius,float thickness,const ImColor color,float speed,int balls)
{
    return ImSpinner::SpinnerRainbowShot(label,radius,thickness,color,speed,balls);
}
CIMGUI_API void ImSpinner_SpinnerSpiral(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs)
{
    return ImSpinner::SpinnerSpiral(label,radius,thickness,color,speed,arcs);
}
CIMGUI_API void ImSpinner_SpinnerSpiralEye(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSpiralEye(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerBarChartSine(const char* label,float radius,float thickness,const ImColor color,float speed,int bars,int mode)
{
    return ImSpinner::SpinnerBarChartSine(label,radius,thickness,color,speed,bars,mode);
}
CIMGUI_API void ImSpinner_SpinnerBarChartAdvSine(const char* label,float radius,float thickness,const ImColor color,float speed,int mode)
{
    return ImSpinner::SpinnerBarChartAdvSine(label,radius,thickness,color,speed,mode);
}
CIMGUI_API void ImSpinner_SpinnerBarChartAdvSineFade(const char* label,float radius,float thickness,const ImColor color,float speed,int mode)
{
    return ImSpinner::SpinnerBarChartAdvSineFade(label,radius,thickness,color,speed,mode);
}
CIMGUI_API void ImSpinner_SpinnerBarChartRainbow(const char* label,float radius,float thickness,const ImColor color,float speed,int bars,int mode)
{
    return ImSpinner::SpinnerBarChartRainbow(label,radius,thickness,color,speed,bars,mode);
}
CIMGUI_API void ImSpinner_SpinnerBlocks(const char* label,float radius,float thickness,const ImColor bg,const ImColor color,float speed)
{
    return ImSpinner::SpinnerBlocks(label,radius,thickness,bg,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerTwinBlocks(const char* label,float radius,float thickness,const ImColor bg,const ImColor color,float speed)
{
    return ImSpinner::SpinnerTwinBlocks(label,radius,thickness,bg,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerSquareRandomDots(const char* label,float radius,float thickness,const ImColor bg,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSquareRandomDots(label,radius,thickness,bg,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerScaleBlocks(const char* label,float radius,float thickness,const ImColor color,float speed,int mode)
{
    return ImSpinner::SpinnerScaleBlocks(label,radius,thickness,color,speed,mode);
}
CIMGUI_API void ImSpinner_SpinnerScaleSquares(const char* label,float radius,float thikness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerScaleSquares(label,radius,thikness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerSquishSquare(const char* label,float radius,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSquishSquare(label,radius,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerFluid(const char* label,float radius,const ImColor color,float speed,int bars)
{
    return ImSpinner::SpinnerFluid(label,radius,color,speed,bars);
}
CIMGUI_API void ImSpinner_SpinnerFluidPoints(const char* label,float radius,float thickness,const ImColor color,float speed,size_t dots,float delta)
{
    return ImSpinner::SpinnerFluidPoints(label,radius,thickness,color,speed,dots,delta);
}
CIMGUI_API void ImSpinner_SpinnerArcPolarFade(const char* label,float radius,const ImColor color,float speed,size_t arcs,int mode)
{
    return ImSpinner::SpinnerArcPolarFade(label,radius,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerArcPolarRadius(const char* label,float radius,const ImColor color,float speed,size_t arcs,int mode)
{
    return ImSpinner::SpinnerArcPolarRadius(label,radius,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerCaleidoscope(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs,int mode)
{
    return ImSpinner::SpinnerCaleidoscope(label,radius,thickness,color,speed,arcs,mode);
}
CIMGUI_API void ImSpinner_SpinnerHboDots(const char* label,float radius,float thickness,const ImColor color,float minfade,float ryk,float speed,size_t dots,int mode)
{
    return ImSpinner::SpinnerHboDots(label,radius,thickness,color,minfade,ryk,speed,dots,mode);
}
CIMGUI_API void ImSpinner_SpinnerMoonDots(const char* label,float radius,float thickness,const ImColor first,const ImColor second,float speed)
{
    return ImSpinner::SpinnerMoonDots(label,radius,thickness,first,second,speed);
}
CIMGUI_API void ImSpinner_SpinnerTwinHboDots(const char* label,float radius,float thickness,const ImColor color,float minfade,float ryk,float speed,size_t dots,float delta)
{
    return ImSpinner::SpinnerTwinHboDots(label,radius,thickness,color,minfade,ryk,speed,dots,delta);
}
CIMGUI_API void ImSpinner_SpinnerThreeDotsStar(const char* label,float radius,float thickness,const ImColor color,float minfade,float ryk,float speed,float delta)
{
    return ImSpinner::SpinnerThreeDotsStar(label,radius,thickness,color,minfade,ryk,speed,delta);
}
CIMGUI_API void ImSpinner_SpinnerSineArcs(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSineArcs(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerTrianglesShift(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,size_t bars)
{
    return ImSpinner::SpinnerTrianglesShift(label,radius,thickness,color,bg,speed,bars);
}
CIMGUI_API void ImSpinner_SpinnerPointsShift(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,size_t bars)
{
    return ImSpinner::SpinnerPointsShift(label,radius,thickness,color,bg,speed,bars);
}
CIMGUI_API void ImSpinner_SpinnerSwingDots(const char* label,float radius,float thickness,const ImColor color,float speed)
{
    return ImSpinner::SpinnerSwingDots(label,radius,thickness,color,speed);
}
CIMGUI_API void ImSpinner_SpinnerCircularPoints(const char* label,float radius,float thickness,const ImColor color,float speed,int lines)
{
    return ImSpinner::SpinnerCircularPoints(label,radius,thickness,color,speed,lines);
}
CIMGUI_API void ImSpinner_SpinnerCurvedCircle(const char* label,float radius,float thickness,const ImColor color,float speed,size_t circles)
{
    return ImSpinner::SpinnerCurvedCircle(label,radius,thickness,color,speed,circles);
}
CIMGUI_API void ImSpinner_SpinnerModCircle(const char* label,float radius,float thickness,const ImColor color,float ang_min,float ang_max,float speed)
{
    return ImSpinner::SpinnerModCircle(label,radius,thickness,color,ang_min,ang_max,speed);
}
CIMGUI_API void ImSpinner_SpinnerDnaDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt,float delta,bool mode)
{
    return ImSpinner::SpinnerDnaDots(label,radius,thickness,color,speed,lt,delta,mode);
}
CIMGUI_API void ImSpinner_Spinner3SmuggleDots(const char* label,float radius,float thickness,const ImColor color,float speed,int lt,float delta,bool mode)
{
    return ImSpinner::Spinner3SmuggleDots(label,radius,thickness,color,speed,lt,delta,mode);
}
CIMGUI_API void ImSpinner_SpinnerRotateSegmentsPulsar(const char* label,float radius,float thickness,const ImColor color,float speed,size_t arcs,size_t layers)
{
    return ImSpinner::SpinnerRotateSegmentsPulsar(label,radius,thickness,color,speed,arcs,layers);
}
CIMGUI_API void ImSpinner_SpinnerSplineAng(const char* label,float radius,float thickness,const ImColor color,const ImColor bg,float speed,float angle,int mode)
{
    return ImSpinner::SpinnerSplineAng(label,radius,thickness,color,bg,speed,angle,mode);
}
CIMGUI_API void ImSpinner_Spinner(const char* label,const detail::SpinnerConfig config)
{
    return ImSpinner::Spinner(label,config);
}



